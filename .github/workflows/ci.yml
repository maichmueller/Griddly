name: CI

on: [ push, pull_request ]

jobs:
  build-and-test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            build_type: "Release",
            cc: cl,
            cxx: cl
          }
          - {
            name: "Windows Latest MinGW",
            os: windows-latest,
            build_type: "Release",
            cc: gcc,
            cxx: g++
          }
          - {
            name: "Ubuntu 20.04 GCC-7",
            os: ubuntu-20.04,
            build_type: "Release",
            cc: gcc-7,
            cxx: g++-7
          }
          - {
            name: "Ubuntu 20.04 GCC-8",
            os: ubuntu-20.04,
            build_type: "Release",
            cc: gcc-8,
            cxx: g++-8
          }
          - {
            name: "Ubuntu 20.04 GCC-9",
            os: ubuntu-20.04,
            build_type: "Release",
            cc: gcc-9,
            cxx: g++-9
          }
          - {
            name: "Ubuntu 20.04 GCC-10",
            os: ubuntu-20.04,
            build_type: "Release",
            cc: gcc-10,
            cxx: g++-10
          }
          # GCC-11 not yet (easily) available on GitHub Action, uncomment once this has changed.
#          - {
#            name: "Ubuntu 20.04 GCC-11",
#            os: ubuntu-20.04,
#            build_type: "Release",
#            cc: gcc-11,
#            cxx: g++-11
#          }
          - {
            name: "Ubuntu 18.04 GCC-7",
            os: ubuntu-18.04,
            build_type: "Release",
            cc: gcc-7,
            cxx: g++-7
          }
          - {
            name: "Ubuntu 18.04 GCC-8",
            os: ubuntu-18.04,
            build_type: "Release",
            cc: gcc-8,
            cxx: g++-8
          }
          - {
            name: "Ubuntu 18.04 GCC-9",
            os: ubuntu-18.04,
            build_type: "Release",
            cc: gcc-9,
            cxx: g++-9
          }
          - {
            name: "Ubuntu 18.04 GCC-10",
            os: ubuntu-18.04,
            build_type: "Release",
            cc: gcc-10,
            cxx: g++-10
          }
          # GCC-11 not yet (easily) available on GitHub Action, uncomment once this has changed.
#          - {
#            name: "Ubuntu 18.04 GCC-11",
#            os: ubuntu-18.04,
#            build_type: "Release",
#            cc: gcc-11,
#            cxx: g++-11
#          }
          - {
            name: "macOS Latest Clang",
            os: macos-latest,
            build_type: "Release",
            cc: clang,
            cxx: clang++
          }

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install conan
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install conan

      - name: Source profile
        if: runner.os == 'Linux'
        shell: bash
        run: source ~/.profile

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: '3.21'

      - name: Use cmake
        run: cmake --version

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DWARNINGS_AS_ERRORS=FALSE

      - name: Installing Vulkan (LINUX)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -ex
          wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-bionic.list http://packages.lunarg.com/vulkan/lunarg-vulkan-bionic.list
          sudo add-apt-repository ppa:deadsnakes/ppa
          sudo apt update
          sudo apt install libvulkan1

      - name: Installing Vulkan (MAC)
        if: runner.os == 'macos'
        shell: bash
        run: |
          set -ex
          curl -L -o "vulkansdk-macos-1.2.148.0.dmg" "https://griddyvulkan.s3.amazonaws.com/vulkansdk-macos-1.2.148.0.dmg"
          hdiutil attach vulkansdk-macos-1.2.148.0.dmg
          cd /Volumes/vulkansdk-macos-1.2.148.0
          ./install_vulkan.py --force-install

      - name: Installing Vulkan (WIN)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          set -ex
          curl -L -o "vulkan-installer.exe" "https://griddyvulkan.s3.amazonaws.com/VulkanSDK-1.2.148.0-Installer.exe"
          # This makes sure we wait for the vulkan SDK to complete installation
          _=$(echo "vulkan-installer.exe /S" | cmd)
          curl -L -o "vulkan-runtime.zip" "https://griddyvulkan.s3.amazonaws.com/vulkan-1.2.148.0-runtime-components.zip"
          unzip vulkan-runtime.zip
          cp VulkanRT-1.2.148.0-Components/x64/vulkaninfo.exe $VULKAN_SDK/Bin
          cp VulkanRT-1.2.148.0-Components/x64/vulkan-1.dll $VULKAN_SDK/Bin

      - name: Set Vulkan VAR
        shell: bash
        run: |
          echo 'VULKAN_SDK='C:/VulkanSDK/1.2.148.0' >> $GITHUB_ENV

      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake --build .

      - name: Tests
        working-directory: ${{runner.workspace}}/build
        run: |
        GTEST_FILTER=-*BlockObserverTest*:*SpriteObserverTest* GTEST_OUTPUT=xml:test-report-gtest-${{ runner.os }}.xml ctest ./build --verbose

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.23
        if: always()
        with:
          files: test-report-gtest.xml

  publish-gtest-results:
    name: "Publish GTest Unit Tests Results"
    needs: build-and-test
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: artifacts/**/*.xml

  python-build-and-test:
    name: Python Package Build & Unit Tests
    needs: build-and-test
    dependsOn: Linux
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), contains(variables['Build.SourceBranch'], 'test_deploy')))
      timeoutInMinutes: 60
      pool:
        vmImage: "ubuntu-18.04"
      strategy:
        matrix:
          ManyLinux_p36:
            PythonVersion: 3.6
            PyBin: cp36-cp36m
            PLAT: manylinux2014_x86_64
          ManyLinux_p37:
            PythonVersion: 3.7
            PyBin: cp37-cp37m
            PLAT: manylinux2014_x86_64
          ManyLinux_p38:
            PythonVersion: 3.8
            PyBin: cp38-cp38
            PLAT: manylinux2014_x86_64
      steps:
        - task: InstallSSHKey@0
          inputs:
            knownHostsEntry: $(griddly_known_hosts_entry)
            sshPublicKey: $(griddly_azure_public_key)
            sshPassphrase: $(griddly_azure_passphrase)
            sshKeySecureFile: griddly
        - checkout: self
          submodules: true
          persistCredentials: true
        - task: UsePythonVersion@0
          inputs:
            versionSpec: $(PythonVersion)
            addToPath: true
          displayName: Set Python $(PythonVersion)
        - bash: |
            pip install conan>=1.40.3
          continueOnError: false
          displayName: Install Conan
        - script: |
            set -ex
            export GRIDDLY_ROOT=$(pwd)
            export PYBIN=$(PyBin)
            export PYVERSION=$(PythonVersion)

            ./python/manylinux/manylinux-build.sh
          displayName: Build Wheels
        - task: TwineAuthenticate@1
          displayName: "Twine Authenticate (test)"
          inputs:
            pythonUploadServiceConnection: pypitest
          condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'test_deploy'))
        - task: TwineAuthenticate@1
          displayName: "Twine Authenticate (live)"
          inputs:
            pythonUploadServiceConnection: pypilive
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        - script: |
            pip install twine
            cd python
            python -m twine upload -r "griddly" --config-file $(PYPIRC_PATH) dist/*.whl
          displayName: Deploy To PyPi
    - PublishTestResults@2
        inputs:
          failTaskOnFailedTests: true
          testResultsFormat: JUnit # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: test-report.xml
          testRunTitle: Ubuntu 18.04 Tests
        displayName: Publish C++ Test Results
                       - script: |
                       set -ex
                       cd python
                       pip install -r requirements.txt
                       python setup.py install
                       pip install pytest pytest-azurepipelines
                       python -m pytest
                       displayName: Run and Publish Python Tests
